# regex elements used
# ? -> one or zero times
# + -> at least one time
# * -> any number of times
# () -> grouping elementns
# a-Z -> letters
# 0-9 -> numbers
# \( \) -> ( )
# (.*) -> anything

typedef ::= keyword+
valuedef ::= typedef: value
structel ::= typedef | valuedef | value
struct ::= \((structel(, structel)*)? (-> value)? \)

value ::= num | string | keyword | struct | expr
value ::= value\(call\) | value[value]
value ::= /* (.*) */ value | // (.*) \n value

callel ::= value | value -> keyword | keyword <- value
callel ::= keyword -> | <- keyword | : value
call ::= (callel(, callel)*)?

keyword ::= (_a-Z)+(_a-Z0-9)*
num ::= (0-9)(_0-9)* | ((0-9)(_0-9)*)?.(_0-9)+
string ::= "(.*)" | '(.*)'
expr ::= value? symb value? | unary_symb value?

symb ::= = | and | > | or | < | != | xor | >=
symb ::= >> | <= | << | .. | in | \* | +-
symb ::= / | ^ | \| | % | , | & | :
unary_symb ::= \+ | - | not

# symbols priority:
# .
# value(value)
# value[value]
# :
# -> <-
# ,
# not
# and or not xor
# = > < >= <= !=
# in & .. << >>
# ^
# * / %
# + -
# +-
